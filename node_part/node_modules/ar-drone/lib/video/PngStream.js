PngStream.TcpVideoStream = require('./TcpVideoStream');
PngStream.PngEncoder = require('./PngEncoder');

var Stream     = require('stream').Stream;
var util       = require('util');
var common     = require('../../test/common');
var fs         = require('fs');

module.exports = PngStream;
util.inherits(PngStream, Stream);
function PngStream(options) {
  Stream.call(this);

  options = options || {};

  this.readable        = true;
  this._options        = options;
  this._tcpVideoStream = null;
  this._pngEncoder     = null;
}

PngStream.prototype.resume = function() {
  this._resume();
};

PngStream.prototype._resume = function() {
  var self = this;

  this._tcpVideoStream = new PngStream.TcpVideoStream(this._options);
  this._pngEncoder     = new PngStream.PngEncoder(this._options);

  if(global.fakeVideo){
      /*var fixture = fs.createReadStream(common.fixtures + '/pave.bin');

      var f = function(){
          fixture.unpipe();
          fixture = fs.createReadStream(common.fixtures + '/pave-68.bin');
          fixture.on("end", f);
          fixture.pipe(self._pngEncoder);
      };

     // fixture.on("end", f);
      fixture.pipe(self._pngEncoder); */

      /*setTimeout(function(){
       var qr = fs.createReadStream('qrcode.png');
       qr.on('data', self.emit.bind(self, 'data'));
       }, 5000);*/

      this.imageIndex = 1;

      setInterval(function(){
          fs.readFile("fake_video/" + self.imageIndex + ".png", function (err, data) {
              if (err) throw err;
              self.emit("data", data)
          });
          self.imageIndex = self.imageIndex < 10 ? self.imageIndex + 1 : 1;
      }, 100);
  } else {
      this._tcpVideoStream.on('error', function(err) {
          self._pngEncoder.end();
          self._resume();

          if (self.listeners('error').length > 0) {
              self.emit('error', err);
          }
      });

      this._tcpVideoStream.connect();
      this._tcpVideoStream.pipe(this._pngEncoder);
  }

  this._pngEncoder.on('data', this.emit.bind(this, 'data'));
};
